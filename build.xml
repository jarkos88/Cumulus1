<project default="deploy" basedir="." xmlns:sf="antlib:com.salesforce">
    <!-- Load the package requirements from version.properties -->
    <loadproperties srcFile="${basedir}/version.properties"/>

    <!-- Load environment variables -->
    <property environment="env" />

    <!-- Load CumulusCI build targets -->
    <import file="${env.CUMULUSCI_PATH}/build/build.xml" />

    <!-- Add project specific build targets and CumulusCI overrides here -->
    <target name="preUpdateRequiredPackages">
        <!-- npsp depends on all other packages.  If it is installed and other packages need to be downgraded (uninstalled), uninstall npsp first -->
        <if>
            <and>
                <not>
                    <equals arg1="${InstalledPackage.npsp.versionNumber}" arg2="Not Installed" />
                </not>
                <or>
                    <bool>
                        <isgreaterthan arg1="${InstalledPackage.npe01.versionNumber}" arg2="version.npe01" />
                    </bool>
                    <bool>
                        <isgreaterthan arg1="${InstalledPackage.npo02.versionNumber}" arg2="version.npo02" />
                    </bool>
                    <bool>
                        <isgreaterthan arg1="${InstalledPackage.npe03.versionNumber}" arg2="version.npe03" />
                    </bool>
                    <bool>
                        <isgreaterthan arg1="${InstalledPackage.npe4.versionNumber}" arg2="version.npe4" />
                    </bool>
                    <bool>
                        <isgreaterthan arg1="${InstalledPackage.npe5.versionNumber}" arg2="version.npe5" />
                    </bool>
                </or>
            </and>
            <then>
                <echo>Uninstalling npsp ${InstalledPackage.npsp.versionNumber} to allow for downgrade</echo>
                <uninstallPackage namespace="npsp" username="${sf.username}" password="${sf.password}" />

                <!-- Override the cached installed version of npsp so we don't have to fetch versions again -->
                <var name="InstalledPackage.npsp.versionNumber" value="Not Installed" />
            </then>
        </if>

        <!-- npo02 depends on npe01 so we have to uninstall npo02 first if npo02 needs downgraded -->
        <if>
            <and>
                <!-- npo02 is installed -->
                <not>
                    <equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" />
                </not>
                <!-- and npe01 need downgraded -->
                <bool>
                    <isgreaterthan arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" />
                </bool>
            </and>
            <then>
                <echo>Uninstalling npo02 ${InstalledPackage.npe01.versionNumber} to allow for npe01 downgrade</echo>
                <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}" />

                <!-- Override the cached installed version of npo02 so we don't have to fetch versions again -->
                <var name="InstalledPackage.npo02.versionNumber" value="Not Installed" />
            </then>
        </if>
    </target>

    <!-- This is only overridden for now until we start using updateMetaXml to also set api version -->
    <target name="updateMetaXml">
        <for list="${required.packages}" delimiter="," param="packageNamespace">
            <sequential>
                <updateMetaXml dir="${basedir}/src" namespace="@{packageNamespace}" version="${version.@{packageNamespace}}" />
            </sequential>
        </for>
    </target>
</project>
